"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os


def get_required(name):
    try:
        return os.environ[name]
    except KeyError:
        raise RuntimeError(f"Missing {name} environment variable!")


APP_NAME_DEFAULT = os.getenv("APP_NAME", "Deepchecks")
APP_NAME_HTML_DEFAULT = os.getenv(
    "APP_NAME_HTML",
    "<b>Deepchecks</b> API",
)
APP_DES_DEFAULT = os.getenv(
    "APP_DES",
    "Deepchecks API",
)

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_required("DJANGO_SECRET_KEY")

# DEBUG
# ------------------------------------------------------------------------------
# See: https://docs.djangoproject.com/en/4.2/ref/settings/#debug
DEBUG = os.getenv("DEBUG", "false").lower() == "true"


# Current release & version
# ------------------------------------------------------------------------------

APP_RUN_DIR = os.getenv("APP_RUN_DIR")
try:
    with open(f"{APP_RUN_DIR}RELEASE") as fp:
        RELEASE = fp.read().strip()
except Exception:
    RELEASE = ""

try:
    with open(f"{APP_RUN_DIR}VERSION") as fp:
        VERSION = fp.read().strip()
except Exception:
    VERSION = ""

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "*").split(",")
ADMIN_USERNAME = os.getenv('ADMIN_USERNAME', 'admin')

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "interactions",
    # Third party apps
    "colorfield",  # Color field
    "corsheaders",  # CORS checking
    "django_filters",  # Extended DRF filters
    "drf_spectacular",  # OpenAPI 3.0 schema generation
    "drf_spectacular_sidecar",  # OpenAPI 3.0 schema UI
    "extra_settings",  # Django extra settings
    "fontawesomefree",  # Font Awesome
    "import_export",  # Import/Export library
    "rest_framework",  # Django REST Framework
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "debug": DEBUG,
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.i18n",
                "django.template.context_processors.request",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "app.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': get_required('PGHOST'),
        'PORT': os.getenv('PGPORT', '5432'),
        'USER': get_required('PGUSER'),
        'PASSWORD': get_required('PGPASSWORD'),
        'NAME': get_required('DB_NAME'),
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = os.getenv("LOCALE", "en")
TIME_ZONE = os.getenv("TZ", "Africa/Lagos")

USE_I18N = True
USE_TZ = True
FIRST_DAY_OF_WEEK = 1  # Monday


# Static files (CSS, JavaScript, Images)
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = os.getenv("STATIC_URL", "static/")
STATIC_ROOT = os.getenv("STATIC_ROOT", "/var/www/static/")

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]


# MEDIA_URL = os.getenv('MEDIA_URL', 'media/')
# MEDIA_ROOT = os.getenv('MEDIA_ROOT', '/media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


SPECTACULAR_SETTINGS = {
    "TITLE": f"{APP_NAME_DEFAULT} API",
    "DESCRIPTION": APP_DES_DEFAULT,
    "VERSION": VERSION,
    "POSTPROCESSING_HOOKS": [
        "drf_spectacular.hooks.postprocess_schema_enums",
    ],
    "SWAGGER_UI_DIST": "SIDECAR",
    "SWAGGER_UI_FAVICON_HREF": "/favicon.ico",
    "REDOC_DIST": "SIDECAR",
}


CORS_ALLOW_ALL_ORIGINS = True


# Logging configuration
# ------------------------------------------------------------------------------
# See https://docs.djangoproject.com/en/4.2/topics/logging/#configuring-logging
# https://docs.python.org/3/library/logging.html#levels

LOGGING_LEVEL = os.getenv("LOGGING_LEVEL", "INFO" if DEBUG else "ERROR")
LOGGING_CLASS = "logging.StreamHandler"
LOGGING_FORMAT = (
    "[%(schema_name)s:%(domain_url)s]"
    " %(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s"
)
LOGGING_FORMATTER = os.getenv("LOGGING_FORMATTER")
if LOGGING_FORMATTER != "verbose":
    LOGGING_FORMATTER = "json"
LOGGING_LOGGER = {
    "level": LOGGING_LEVEL,
    "handlers": ["console"],
    "propagate": False,
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "verbose": {
            "format": LOGGING_FORMAT,
        },
        "json": {
            "class": "pythonjsonlogger.jsonlogger.JsonFormatter",
            "format": LOGGING_FORMAT,
        },
    },
    "handlers": {
        "console": {
            "level": LOGGING_LEVEL,
            "class": LOGGING_CLASS,
            "formatter": LOGGING_FORMATTER,
        },
    },
    "root": {
        "level": "ERROR",
        "handlers": ["console"],
    },
}


# Local and Debug tools
# ------------------------------------------------------------------------------

DEBUG_TOOLBAR_ENABLED = bool(os.getenv("DEBUG_TOOLBAR_ENABLED"))
if DEBUG and DEBUG_TOOLBAR_ENABLED:
    INSTALLED_APPS += ["debug_toolbar"]
    MIDDLEWARE += ["debug_toolbar.middleware.DebugToolbarMiddleware"]
    DEBUG_TOOLBAR_CONFIG = {"SHOW_TOOLBAR_CALLBACK": lambda __: True}


# celery broker and result
CELERY_BROKER_URL = os.getenv("BROKER_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = os.getenv("RESULT_BACKEND", "redis://localhost:6379/0")
